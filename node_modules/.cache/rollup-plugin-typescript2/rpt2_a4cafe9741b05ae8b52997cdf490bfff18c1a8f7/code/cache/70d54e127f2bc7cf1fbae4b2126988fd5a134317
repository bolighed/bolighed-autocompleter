{"code":"import * as React from 'react';\r\nconst pairs = [\r\n    ['ø', 'oe'],\r\n    ['å', 'aa'],\r\n    ['æ', 'ae']\r\n];\r\nfunction buildRegexp(input) {\r\n    const out = [], len = pairs.length;\r\n    for (let i = 0, ii = input.length; i < ii; i++) {\r\n        for (let x = 0; x < len; x++) {\r\n            if ((input[i] == pairs[x][0]) ||\r\n                (input[i] == pairs[x][1][0] &&\r\n                    input[i + 1] == pairs[x][1][1])) {\r\n                out.push(`(?:${pairs[x][0]}|${pairs[x][1]})`);\r\n                if (pairs[x][0] === input[i])\r\n                    i++;\r\n                else\r\n                    i += pairs[x][1].length;\r\n                break;\r\n            }\r\n        }\r\n        out.push(input[i]);\r\n    }\r\n    return new RegExp(out.join(''), 'i');\r\n}\r\nfunction highlight(input, entry) {\r\n    return entry.replace(buildRegexp(input), x => `<b>${x}</b>`);\r\n}\r\nexport function AutoCompleteItem(props) {\r\n    return React.createElement(\"li\", { onClick: _ => {\r\n            props.entry && props.onClick(props.entry);\r\n        }, className: props.selected ? 'selected' : '' },\r\n        React.createElement(\"span\", { dangerouslySetInnerHTML: { __html: highlight(props.input, props.entry.toString()) } }));\r\n}\r\n","references":["/home/rasmus/Development/Bo/bolighed-autocompleter/node_modules/@types/react/index.d.ts","/home/rasmus/Development/Bo/bolighed-autocompleter/src/types.ts"],"dts":{"name":"/home/rasmus/Development/Bo/bolighed-autocompleter/autocompleter-item.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { ToString } from './types';\r\nexport interface AutoCompleteItemProps {\r\n    selected: boolean;\r\n    entry: ToString;\r\n    input: string;\r\n    onClick: (e: ToString) => any;\r\n}\r\nexport declare function AutoCompleteItem(props: AutoCompleteItemProps): JSX.Element;\r\n"}}
